# modified from librealsense/wrappers/python/examples/opencv_viewer_example.py
# and http://dlib.net/face_landmark_detection.py.html

import pyrealsense2 as rs
import numpy as np
import time
import dlib

class average:
    def __init__(self):
        self.count = 0
        self.accum = 0

    def add(self, j):
        self.count += 1
        self.accum += j

    def get(self):
        return self.accum / self.count if self.count >= 1 else 0

class timeaverage:
    def __init__(self):
        self.avg = average()
        self.t = None

    def start(self):
        if self.t is not None:
            raise Exception("started twice")
        self.t = time.time()

    def stop(self):
        if self.t is None:
            raise Exception("already stop")
        self.avg.add(time.time() - self.t)
        self.t = None

    def get(self):
        return self.avg.get()

facebbtimer = timeaverage()

shapestimer = timeaverage()

shortftimer = timeaverage()

def decompose(r):
    return r.top(), r.bottom(), r.left(), r.right()

def bounds(aa):
    return min(aa), max(aa)
def box_of(shape):
    partsx, partsy = zip(*[(p.x, p.y) for p in shape.parts()])
    t, b = bounds(partsy)
    l, r = bounds(partsx)
    return dlib.rectangle(l, t, r, b)

class facedetector:
    def __init__(self):
        self.currentbb = None

    def start(self):
        self.pipeline = rs.pipeline()
        self.config = rs.config()
        self.config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 60)
        self.config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 60)

        self.fd = dlib.get_frontal_face_detector()
        self.sp = dlib.shape_predictor("landmarks.dat")

        self.pipeline.start(self.config)

    def face_detector(self, im):
        def sp(b):
            shapestimer.start()
            out = self.sp(im, b)
            shapestimer.stop()
            return out

        reregister = self.currentbb is None

        if reregister:
            facebbtimer.start()
            facebb = self.fd(im)
            facebbtimer.stop()
            if len(facebb) > 0:
                self.currentbb = facebb[0]

        if self.currentbb:
            t0, b0, l0, r0 = decompose(self.currentbb)
            shape = sp(self.currentbb)
            t1, b1, l1, r1 = decompose(box_of(shape))
            t1 -= 25
            b1 += 2
            l1 -= 2
            r1 += 2
            self.currentbb = dlib.rectangle(l1, t1, r1, b1)
            self.currentbb = self.currentbb.intersect(dlib.rectangle(0, 0, im.shape[1], im.shape[0]))
            print("height %d -> %d" % (b0 - t0, b1 - t1))
            print("width %d -> %d" % (r0 - l0, r1 - l1))
            return shape

        return None

    def get(self):
        frames = self.pipeline.wait_for_frames()
        depth_frame = frames.get_depth_frame()
        color_frame = frames.get_color_frame()
        if not depth_frame or not color_frame:
            return None
        depth_image = np.asanyarray(depth_frame.get_data())
        color_image = np.asanyarray(color_frame.get_data())
        color_image = color_image[:, :, [2,1,0]]
        shape = self.face_detector(color_image)
        return (depth_image, color_image, shape)

    def stop(self):
        self.pipeline.stop()

if __name__ == "__main__":
    fd = facedetector()
    fd.start()
    wi = dlib.image_window()
    framecount = -1
    try:
        while True:
            out = fd.get()
            if out is not None:
                if framecount == -1:
                    framecount = 0
                    starttime = time.time()
                    pass
                else:
                    framecount += 1
                    print(f"FPS: {framecount / (time.time() - starttime)}")
                    #print(f"Face bounding boxes take {facebbtimer.get()} on average")
                    #print(f"Shape prediction takes {shapestimer.get()} on average")
                    #print(f"Small face bounding boxes: {shortftimer.get()} on average")
                    #time.sleep(0.2)
                depthimage, colorimage, shape = out
                #print(colorimage.shape)
                wi.set_image(colorimage)
                wi.clear_overlay()
                if shape is not None:
                    wi.add_overlay(shape.rect)
                    wi.add_overlay(shape)
    finally:
        fd.stop()
